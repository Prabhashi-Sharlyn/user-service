version: 0.2

env:
  variables:
    ECR_REPO_NAME: user-service
    REGION: ap-south-1
    CLUSTER_NAME: betterwellness-cluster
    TAG: latest

phases:
  install:
    runtime-versions:
      java: corretto17
    commands:
      - echo Installing kubectl...
      - curl -LO "https://s3.us-west-2.amazonaws.com/amazon-eks/1.28/2024-03-20/bin/linux/amd64/kubectl"
      - chmod +x ./kubectl
      - mv ./kubectl /usr/local/bin

  pre_build:
    commands:
      - echo Logging into ECR...
      - ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
      - REPOSITORY_URI=$ACCOUNT_ID.dkr.ecr.$REGION.amazonaws.com/$ECR_REPO_NAME
      - echo Using frontend URL passed via environment variable.. $FRONTEND_URL
      - echo Updating CORS config...
      - sed -i "s|setAllowedOrigins(.*)|setAllowedOrigins(List.of(\"$FRONTEND_URL\"))|g" src/main/java/com/betterwellness/userservice/config/CorsConfig.java

  build:
    commands:
      - echo Building JAR...
      - mvn clean package -DskipTests
      - echo Authenticating to ECR...
      - aws ecr get-login-password --region $REGION | docker login --username AWS --password-stdin $REPOSITORY_URI
      - echo Building Docker image...
      - docker build -t $REPOSITORY_URI:$TAG .

  post_build:
    commands:
      - echo Pushing image to ECR...
      - docker push $REPOSITORY_URI:$TAG

      - echo Getting EKS cluster endpoint and cert...
      - ENDPOINT=$(aws eks describe-cluster --name $CLUSTER_NAME --region $REGION --query "cluster.endpoint" --output text)
      - CERT=$(aws eks describe-cluster --name $CLUSTER_NAME --region $REGION --query "cluster.certificateAuthority.data" --output text)

      - echo Generating token...
      - TOKEN=$(aws eks get-token --cluster-name $CLUSTER_NAME --region $REGION --query "status.token" --output text)

      - echo Writing kubeconfig manually...
      - mkdir -p ~/.kube
      - |
        cat <<EOF > ~/.kube/config
        apiVersion: v1
        kind: Config
        clusters:
        - cluster:
            server: $ENDPOINT
            certificate-authority-data: $CERT
          name: eks-cluster
        contexts:
        - context:
            cluster: eks-cluster
            user: eks-user
          name: eks-context
        current-context: eks-context
        users:
        - name: eks-user
          user:
            token: $TOKEN
        EOF

      - echo Replacing image URI in k8s.yaml...
      - sed -i "s|<IMAGE_URI>|$REPOSITORY_URI:$TAG|g" k8s.yaml
      - echo "Final k8s.yaml contents:"
      - cat k8s.yaml

      - echo Deploying to Kubernetes...
      - kubectl apply -f k8s.yaml

artifacts:
  files: '**/*'
